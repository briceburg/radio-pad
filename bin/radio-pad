#!/usr/bin/env python3
from prompt_toolkit import prompt
from prompt_toolkit.key_binding import KeyBindings
import os, sys, subprocess
import urllib.request
import json

AUDIO_CHANNELS = os.getenv("AUDIO_CHANNELS", "stereo")  # 'stereo' or 'mono'
RADIO_STATIONS_URL = os.getenv(
    "RADIO_STATIONS_URL",
    "https://raw.githubusercontent.com/briceburg/radio-pad/refs/heads/main/src/config/stations.json",
)

# cache radio stations
if not os.path.exists("/tmp/radio-pad-stations.json"):
    try:
        print(f"Downloading radio stations from {RADIO_STATIONS_URL} ...")
        urllib.request.urlretrieve(RADIO_STATIONS_URL, "/tmp/radio-pad-stations.json")
    except Exception as e:
        print(f"Error downloading radio stations: {e}")
        sys.exit(1)

with open("/tmp/radio-pad-stations.json", "r") as f:
    try:
        RADIO_STATIONS = json.load(f)
    except json.JSONDecodeError as e:
        print(f"Error parsing radio stations JSON: {e}")
        sys.exit(1)

bindings = KeyBindings()
mpv_process = None


def char_to_index(ch):
    """
    Convert a single character to an integer index:
    '0'-'9' -> 0-9, 'a'-'z' -> 10-35.
    """
    if ch.isdigit():
        return int(ch)
    elif "a" <= ch <= "z":
        return 10 + ord(ch) - ord("a")
    else:
        return None


def play_station(station_index):
    global mpv_process
    station = RADIO_STATIONS[station_index]

    if mpv_process:
        print("Stopping current station...")
        mpv_process.terminate()

    print(f"Playing {station['name']} from {station['url']} as {AUDIO_CHANNELS}.")
    mpv_process = subprocess.Popen(
        [
            "mpv",
            station["url"],
            "--no-osc",
            "--no-osd-bar",
            "--no-input-default-bindings",
            "--no-input-cursor",
            "--no-input-vo-keyboard",
            "--no-input-terminal",
            "--no-audio-display",
            "--input-ipc-server=/tmp/radio-pad-mpv.sock",
            "--no-video",
            "--no-cache",
            "--stream-lavf-o=reconnect_streamed=1",
            "--profile=low-latency",
            f"--audio-channels={AUDIO_CHANNELS}",
        ],
        stdin=subprocess.DEVNULL,
        stdout=sys.stdout,
        stderr=subprocess.STDOUT,
    )


@bindings.add("c-@", "<any>", "<any>", record_in_macro=False)
def _(event):
    page_char = event.key_sequence[-2].data
    station_char = event.key_sequence[-1].data
    page_idx = char_to_index(page_char)
    station_idx = char_to_index(station_char)

    if page_idx is None or station_idx is None:
        print(f"Invalid input: Page: {page_char}, Station: {station_char}.")
        return

    stations_per_page = (
        12  # Assuming 12 stations per page, align this with macropad configuration
    )
    station_index = page_idx * stations_per_page + station_idx
    if station_index < 0 or station_index >= len(RADIO_STATIONS):
        print(
            f"Invalid station index: {station_index}. Page: {page_char}, Station: {station_char}."
        )
        return

    play_station(station_index)


while True:
    try:
        print("Press 'Control + @' followed by the radio page and station id.")
        print("Press 'Control + C' or 'Control + D' to exit.")
        prompt(key_bindings=bindings)
    except (KeyboardInterrupt, EOFError):
        print("Exiting...")
        if mpv_process:
            mpv_process.terminate()
        sys.exit(0)
