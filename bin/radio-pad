#!/usr/bin/env python3
import os, subprocess

RADIO_STATIONS = [
    {"name": "wwoz", "url": "https://www.wwoz.org/listen/hi"},
    {"name": "wmse", "url": "https://wmse.streamguys1.com/wmselivemp3"},
    {"name": "gmcr", "url": "http://stream.gmcr.org:8000/gmcr"},
    {
        "name": "kunm",
        "url": "https://playerservices.streamtheworld.com/api/livestream-redirect/KUNMFM_128.mp3",
    },
    {"name": "kmkb", "url": "http://50.19.66.66:8000/kmkb"},
    {"name": "kmrd", "url": "https://kmrd.broadcasttool.stream/listen"},
    {"name": "kkfi", "url": "https://stream.pacificaservice.org:9000/kkfi_128"},
    {"name": "wqxr", "url": "https://stream.wqxr.org/wqxr-web?nyprBrowserId="},
    {"name": "wtju", "url": "https://streams.wtju.net/wtju-live.mp3"},
    {"name": "lofi", "url": "https://www.youtube.com/watch?v=5qap5aO4i9A"},
    {"name": "kboo", "url": "https://live.kboo.fm:8443/high"},
]


class RadioPad:
    def __init__(self):
        self.audio_channels = os.getenv(
            "AUDIO_CHANNELS", "stereo"
        )  # 'stereo' or 'mono'
        self.mpv_process = None
        self.listening = False

        # stations_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "../config/stations.json"))
        # with open(stations_path, "r") as f:
        #     self.stations = json.load(f)
        self.stations = RADIO_STATIONS  # Use the predefined list for now

    def play_station(self, station_name):
        station = next((s for s in self.stations if s["name"] == station_name), None)
        if not station:
            print(f"Station '{station_name}' not found. Please try again.")
            return

        if self.mpv_process:
            print("Stopping current station...")
            self.mpv_process.terminate()

        print(
            f"Playing {station['name']} from {station['url']} on {self.audio_channels} audio channel."
        )
        self.mpv_process = subprocess.Popen(
            [
                "mpv",
                station["url"],
                "--no-video",
                "--no-cache",
                "--stream-lavf-o=reconnect_streamed=1",
                "--profile=low-latency",
                f"--audio-channels={self.audio_channels}",
            ],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

    def listen_for_station(self, hotkey):
        from sshkeyboard import listen_keyboard

        print(
            f"Press {hotkey} to start entering a station name. Press {hotkey} again to submit."
        )

        def on_key_press(key):
            if key == hotkey:
                if self.buffer is None:
                    self.buffer = ""
                else:
                    self.play_station(self.buffer)
                    self.buffer = None
            elif self.buffer is not None:
                self.buffer += key

        try:
            self.buffer = None
            listen_keyboard(
                on_press=on_key_press, delay_second_char=0, delay_other_chars=0
            )
        except KeyboardInterrupt:
            print("Exiting...")
        finally:
            if self.mpv_process:
                self.mpv_process.terminate()


if __name__ == "__main__":
    radio = RadioPad()
    radio.listen_for_station("f12")  # Match with macros/radio.py
